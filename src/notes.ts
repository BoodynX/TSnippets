///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Function Overloads
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

type stringOrNumber = string | number

// The last def needs to be opened to accept all the above defs
function toBeOverloaded(param: number): number;
function toBeOverloaded(param: string): string;
function toBeOverloaded(param: stringOrNumber): stringOrNumber {
    return param
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Optional Chaining
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const nestedValues = {
    key1: 'some val',
    optionalParam: {optionalSubParam: 'some optional val'}
}

console.log(nestedValues?.optionalParam?.optionalSubParam)


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Nullish Coalescing
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


const unknownInput = ''; // also false or 0

console.log(unknownInput || 'DEFAULT') // this will print 'DEFAULT'
console.log(unknownInput ?? 'DEFAULT') // this will print '' because ?? is triggered only by null and undefined